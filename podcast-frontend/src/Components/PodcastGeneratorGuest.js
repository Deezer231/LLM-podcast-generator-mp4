// PodcastGeneratorGuest.js - Main guest-facing podcast generator page (React)

import React, { useState } from 'react';
import axios from 'axios';

// Gradient style for disclaimer text
const gradientStyle = {
  background: 'linear-gradient(90deg, #df1b1b, #d62121, #ce2525, #c72c2c, #ba3030)',
  WebkitBackgroundClip: 'text',
  WebkitTextFillColor: 'transparent',
  backgroundClip: 'text',
  fontWeight: 700,
  fontSize: 16,
  animation: 'gradient-move 3s linear infinite',
  display: 'inline-block',
};

// Main functional component for the guest podcast generator
const PodcastGeneratorGuest = () => {
  // State for topic input, loading spinner, generated podcast, and error message
  const [topic, setTopic] = useState('');
  const [loading, setLoading] = useState(false);
  const [generatedPodcast, setGeneratedPodcast] = useState(null);
  const [error, setError] = useState(null);

  // Handle the Generate Podcast button click
  const handleGenerate = async () => {
    if (!topic.trim()) return;
    setLoading(true);
    setError(null);
    setGeneratedPodcast(null);
    try {
      // Send topic to backend to generate podcast
      const res = await axios.post('http://localhost:5000/generate', { topic });
      setGeneratedPodcast(res.data.podcast);
      setTopic('');
    } catch (err) {
      setError('Failed to generate podcast.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="iridescence-container">
      <div className="iridescence"></div>
      {/* Disclaimer at very top left of the page */}
      <div style={{ position: 'fixed', top: 0, left: 0, maxWidth: 220, padding: 8, background: 'rgba(255,255,255,0.85)', borderRadius: 8, margin: 8, zIndex: 10 }}>
        <span style={gradientStyle}>Disclaimer:</span><br />
        <span style={gradientStyle}>Podcast results are generated by AI and may not always be accurate or high quality.</span><br />
        <span style={gradientStyle}>AI-generated podcasts may contain false information or hallucinated details. Always fact-check important content.</span>
      </div>
      {/* Login button at top right */}
      <button onClick={() => window.location.href = '/login'} style={{ position: 'absolute', top: 20, right: 20, padding: '8px 16px', zIndex: 2 }}>
        Login
      </button>
      <div style={{ position: 'relative', zIndex: 1, maxWidth: 900, margin: '0 auto', paddingTop: 40 }}>
        {/* Centered generator UI */}
        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: 40 }}>
          <h1 style={{ marginBottom: 16, marginTop: 0 }}>üéôÔ∏è AI Podcast Generator</h1>
          <div style={{ marginBottom: 20, width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
            <input
              type="text"
              value={topic}
              onChange={e => setTopic(e.target.value)}
              placeholder="Enter topic"
              style={{ padding: 10, width: 300, marginBottom: 10 }}
              disabled={loading}
            />
            <button onClick={handleGenerate} disabled={loading || !topic.trim()} style={{ padding: 10, width: 180 }}>
              {loading ? 'Generating...' : 'Generate Podcast'}
            </button>
          </div>
          {/* Show error if generation fails */}
          {error && <p style={{ color: 'red' }}>{error}</p>}
          {/* Show generated podcast if available */}
          {generatedPodcast && (
            <div style={{ border: '1px solid #ccc', padding: 16, marginTop: 16, background: 'rgba(255,255,255,0.85)', borderRadius: 8 }}>
              <h2>{generatedPodcast.title}</h2>
              <p><strong>Topic:</strong> {generatedPodcast.topic}</p>
              <h3>üìù Script</h3>
              <pre style={{ whiteSpace: 'pre-wrap' }}>{generatedPodcast.script}</pre>
              <h3>üîë Bullet Points</h3>
              <ul>
                {generatedPodcast.bulletPoints.map((point, i) => (
                  <li key={i}>{point}</li>
                ))}
              </ul>
              {/* Audio player and download link if audio is available */}
              {generatedPodcast.audioUrl ? (
                <>
                  <h3>üîä Audio Preview</h3>
                  <audio controls style={{ width: '100%' }}>
                    <source src={`http://localhost:5000${generatedPodcast.audioUrl}`} type="audio/mpeg" />
                    Your browser does not support the audio element.
                  </audio>
                  <br /><br />
                  <a
                    href={`http://localhost:5000${generatedPodcast.audioUrl}`}
                    download
                    style={{
                      padding: '10px 16px',
                      backgroundColor: '#4CAF50',
                      color: 'white',
                      textDecoration: 'none',
                      borderRadius: 6,
                      display: 'inline-block',
                    }}
                  >
                    ‚¨áÔ∏è Download Full Audio
                  </a>
                </>
              ) : (
                <p><em>No audio available.</em></p>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default PodcastGeneratorGuest;
